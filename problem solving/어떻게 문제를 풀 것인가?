### 어떻게 문제를 풀것인가

#### 제 1부 교실에서

우선 1부만 보면 학생을 위한 책이기 전에, 교사가 학생을 어떻게 가르치고 유도해야 하는지에 대한 책 같다는 느낌을 받았다. 학생의 입장에서 이를 적용하기 위해서는 교사와 학생의 역할을 오가며 적절히 발문을 유도하는 연습을 해야겠다.

문제를 풀기 위해서는 가장 먼저 **문제를 이해** 해야 한다.

**문제를 이해** 하기 위해서는 

- 구해야 하는 **미지**인 것은 무엇인가?
- 주어진 **자료**는 무엇인가?
- 주어진 **조건**은 만족될 수 있는가? **조건**은 **미지**인 것을 결정하기에 충분한가?
- 문제를 표현하는 **그림**을 그리거나, 적절한 **기호**를 붙여라.

그 후 **계획**을 세워야 하며, 그 **계획**을 **실행** 하여야 한다.

문제를 해결한 뒤에는 **뒤돌아보고** 다시 검토하며 **피드백**을 주고 받아야한다.



이를 **프로그래밍**에 간단하게 대입해 보면,

- 구해야하는 **출력(Output)** 혹은 **반환 값(Return)** 은 무엇인가?
- 주어진 **입력(Input)** 혹은 **매개 변수/인자(parameter)**는 무엇인가?
- 주어진 **명세** 혹은 **조건** 은 만족될 수 있는가? 추가로 더 필요한 **명세**나 **조건**은 없는가?
  - 추가적으로 이 과정에서 **TDD**도 사용할 수 있을거 같다.
- 문제를 표현하는 **순서도(다이어그램)** 를 그려보거나 **수도 코드**, 적절한 **변수 명**을 붙여라.

그 후 실제 **소스 코드**를 작성하고, 그 **소스 코드**를 **컴파일**하여 **실행** 해야 한다.

작성한 **소스 코드**가 주어진 문제를 해결했는가 **뒤돌아보고 검토**하며  **코드 리뷰** 혹은 **피드백**을 주고 받아야 한다.

- 이 때에도 **TDD**를 적용할 수 있을 것 같다.



그리고 스스로 발문을 유도하거나, 누군가에 도움을 받을 때 주의 해야 하는것은 `내가 현재 상황에서 해당 발문을 얻기 까지의 과정을 이해하고 알고 있는가` 이다.

예를 들어 하노이탑 문제나 팩토리얼 문제를 풀 때, `재귀 함수를 알고 있는가?` 라는 발문을 얻게 된다면, 내가 이 상황에서 왜 재귀 함수를 사용해야 하는지 알지 못하고 사용하게 된다면 이는 도움이 아니고 독이 된다.



그러니 구글링을 하게 되는 경우에도, 직접인 해법 혹은 풀이 방법을 찾아보기 보단 스스로 초기부터 발문해서 해결해 나가는 연습을 해야겠다. 이때 유용하게 사용되는 것이 `비슷한 문제를 본적이 있는가` 이다.



보통 **코딩 테스트** 준비를 위해 알고리즘 문제를 풀때 특정 주제에 맞는 문제를 풀게 된다. (스택문제, DP문제, 그래프 문제 등등)

이렇게 해당 주제를 스스로 유도한 것이 아니면 위에서 언급한 것처럼 이것은 오히려 독이 된다.

실제 **코딩 테스트** 환경에서 `이 문제는 DP 문제입니다` 라는 식의 힌트는 주어지지 않는다.
